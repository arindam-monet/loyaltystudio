# Stage 1: Build dependencies and generate Prisma client
FROM node:20-alpine AS builder

WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm@10.4.1

# Copy package.json files for workspace setup
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/typescript-config/package.json ./packages/typescript-config/
COPY packages/eslint-config/package.json ./packages/eslint-config/
COPY packages/schemas/package.json ./packages/schemas/
COPY apps/api/package.json ./apps/api/

# Copy TypeScript configuration files
COPY packages/typescript-config/base.json ./packages/typescript-config/
COPY packages/typescript-config/nextjs.json ./packages/typescript-config/
COPY packages/typescript-config/react-library.json ./packages/typescript-config/

# Install dependencies using pnpm with frozen lockfile
RUN pnpm install --frozen-lockfile

# Copy source code for schemas package
COPY packages/schemas/src ./packages/schemas/src
COPY packages/schemas/tsconfig.json ./packages/schemas/

# Build the schemas package
WORKDIR /app/packages/schemas
RUN pnpm build

# Copy API source code
WORKDIR /app
COPY apps/api ./apps/api/

# Generate Prisma client
WORKDIR /app/apps/api
RUN npx prisma generate

# Build the API using the custom build script
RUN node --loader ts-node/esm scripts/build-without-typecheck.js

# Stage 2: Create the production image
FROM node:20-alpine AS production

WORKDIR /app

# Copy package.json files
COPY --from=builder /app/apps/api/package.json ./package.json

# Install production dependencies only
RUN npm install --production

# Copy built files from builder stage
COPY --from=builder /app/apps/api/dist ./dist
COPY --from=builder /app/apps/api/prisma ./prisma

# Generate Prisma client in production image
RUN npx prisma generate

# Expose the port
EXPOSE 3003

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3003

# Start the application
CMD ["node", "dist/index.js"]
