generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id          String           @id @default(cuid())
  name        String
  domain      String           @unique
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  merchants   Merchant[]
  users       User[]
  invitations UserInvitation[]
}

model User {
  id                     String                @id @default(cuid())
  email                  String                @unique
  name                   String?
  password               String?
  tenantId               String
  roleId                 String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  emailVerified          Boolean               @default(false)
  approvedAt             DateTime?
  approvedBy             String?
  isApproved             Boolean               @default(false)
  status                 UserStatus            @default(PENDING)
  campaignParticipations CampaignParticipant[]
  demoRequest            DemoRequest?
  pointsBalances         PointsBalance[]
  pointsCalculations     PointsCalculation[]
  pointsTransactions     PointsTransaction[]
  programMemberships     ProgramMember[]
  rewardRedemptions      RewardRedemption[]
  segmentMemberships     SegmentMember[]
  role                   Role?                 @relation(fields: [roleId], references: [id])
  tenant                 Tenant                @relation(fields: [tenantId], references: [id])
  devices                UserDevice[]
  invitedUsers           UserInvitation[]      @relation("InvitedBy")
  invitedBy              UserInvitation?       @relation("InvitedUser")
}

model DemoRequest {
  id              String            @id @default(cuid())
  userId          String            @unique
  companyName     String
  companySize     String
  industry        String
  phoneNumber     String?
  jobTitle        String?
  message         String?
  status          DemoRequestStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  processedAt     DateTime?
  processedBy     String?
  rejectionReason String?
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserInvitation {
  id            String           @id @default(cuid())
  email         String
  invitedById   String
  invitedUserId String?          @unique
  token         String           @unique
  roleId        String
  tenantId      String
  expiresAt     DateTime
  status        InvitationStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  invitedBy     User             @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedUser   User?            @relation("InvitedUser", fields: [invitedUserId], references: [id])
  role          Role             @relation(fields: [roleId], references: [id])
  tenant        Tenant           @relation(fields: [tenantId], references: [id])
}

model Merchant {
  id                 String              @id @default(cuid())
  name               String
  tenantId           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  subdomain          String?             @unique
  address            String?
  city               String?
  country            String?
  email              String
  phone              String?
  state              String?
  zipCode            String?
  branding           Json?               @default("{}")
  currency           String              @default("USD")
  timezone           String              @default("UTC")
  apiKeys            ApiKey[]
  loyaltyPrograms    LoyaltyProgram[]
  tenant             Tenant              @relation(fields: [tenantId], references: [id])
  pointsBalances     PointsBalance[]
  pointsCalculations PointsCalculation[]
  webhooks           Webhook[]

  @@index([subdomain])
  @@index([tenantId])
}

model Permission {
  id          String           @id @default(cuid())
  name        String
  description String?
  resource    String
  action      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@unique([resource, action])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]
  invitations UserInvitation[]
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model UserDevice {
  id           String   @id @default(cuid())
  userId       String
  deviceId     String
  deviceInfo   Json
  ipAddress    String?
  lastActiveAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, deviceId])
  @@index([userId])
  @@index([deviceId])
}

model PointsTransaction {
  id              String              @id @default(cuid())
  userId          String?
  amount          Int
  type            String
  reason          String
  metadata        Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  programMemberId String?
  calculations    PointsCalculation[]
  programMember   ProgramMember?      @relation(fields: [programMemberId], references: [id])
  user            User?               @relation(fields: [userId], references: [id])

  @@index([programMemberId])
  @@index([userId])
  @@index([type])
}

model LoyaltyProgram {
  id          String        @id @default(cuid())
  name        String
  description String?
  merchantId  String
  isActive    Boolean       @default(true)
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  settings    Json?
  campaigns   Campaign[]
  merchant    Merchant      @relation(fields: [merchantId], references: [id])
  pointsRules PointsRule[]
  tiers       ProgramTier[]
  rewards     Reward[]
  segments    Segment[]

  @@index([merchantId])
}

model ProgramTier {
  id               String          @id @default(cuid())
  name             String
  description      String?
  pointsThreshold  Int
  benefits         Json?
  loyaltyProgramId String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  members          ProgramMember[]
  loyaltyProgram   LoyaltyProgram  @relation(fields: [loyaltyProgramId], references: [id])

  @@index([loyaltyProgramId])
}

model ProgramMember {
  id                 String              @id @default(cuid())
  userId             String?
  tierId             String
  pointsBalance      Int                 @default(0)
  joinedAt           DateTime            @default(now())
  lastActivity       DateTime?
  metadata           Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  email              String?
  externalId         String?
  name               String?
  phoneNumber        String?
  pointsTransactions PointsTransaction[]
  tier               ProgramTier         @relation(fields: [tierId], references: [id])
  user               User?               @relation(fields: [userId], references: [id])
  rewardRedemptions  RewardRedemption[]

  @@index([tierId])
  @@index([userId])
  @@index([email])
}

model Campaign {
  id               String                @id @default(cuid())
  name             String
  description      String?
  type             String
  startDate        DateTime
  endDate          DateTime?
  conditions       Json?
  rewards          Json?
  isActive         Boolean               @default(true)
  loyaltyProgramId String
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  loyaltyProgram   LoyaltyProgram        @relation(fields: [loyaltyProgramId], references: [id])
  participants     CampaignParticipant[]

  @@index([loyaltyProgramId])
  @@index([startDate])
  @@index([endDate])
}

model CampaignParticipant {
  id         String   @id @default(cuid())
  campaignId String
  userId     String
  status     String
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([campaignId, userId])
  @@index([campaignId])
  @@index([userId])
}

model PointsRule {
  id               String         @id @default(cuid())
  name             String
  description      String?
  conditions       Json
  points           Int
  metadata         Json?
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  loyaltyProgramId String
  categoryRules    Json?
  maxPoints        Int?
  minAmount        Decimal?
  timeRules        Json?
  type             String
  loyaltyProgram   LoyaltyProgram @relation(fields: [loyaltyProgramId], references: [id])

  @@index([loyaltyProgramId])
}

model Reward {
  id               String             @id @default(cuid())
  name             String
  description      String
  pointsCost       Int
  type             String
  metadata         Json?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  loyaltyProgramId String
  conditions       Json?
  redemptionLimit  Int?
  stock            Int?
  validityPeriod   Int?
  loyaltyProgram   LoyaltyProgram     @relation(fields: [loyaltyProgramId], references: [id])
  redemptions      RewardRedemption[]

  @@index([loyaltyProgramId])
}

model Segment {
  id               String          @id @default(cuid())
  name             String
  description      String?
  type             String
  criteria         Json
  isActive         Boolean         @default(true)
  loyaltyProgramId String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  loyaltyProgram   LoyaltyProgram  @relation(fields: [loyaltyProgramId], references: [id])
  members          SegmentMember[]

  @@index([loyaltyProgramId])
}

model SegmentMember {
  id              String   @id @default(cuid())
  segmentId       String
  userId          String?
  joinedAt        DateTime @default(now())
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  programMemberId String?
  segment         Segment  @relation(fields: [segmentId], references: [id])
  user            User?    @relation(fields: [userId], references: [id])

  @@unique([segmentId, userId], name: "segmentUserMember")
  @@index([segmentId])
  @@index([userId])
}

model RewardRedemption {
  id              String         @id @default(cuid())
  userId          String?
  rewardId        String
  quantity        Int
  pointsCost      Int
  status          String
  metadata        Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  programMemberId String?
  programMember   ProgramMember? @relation(fields: [programMemberId], references: [id])
  reward          Reward         @relation(fields: [rewardId], references: [id])
  user            User?          @relation(fields: [userId], references: [id])

  @@index([programMemberId])
  @@index([userId])
  @@index([rewardId])
  @@index([status])
}

model PointsBalance {
  id              String   @id @default(cuid())
  userId          String?
  merchantId      String
  balance         Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  programMemberId String?
  merchant        Merchant @relation(fields: [merchantId], references: [id])
  user            User?    @relation(fields: [userId], references: [id])

  @@unique([userId, merchantId], name: "userMerchantBalance")
  @@index([userId])
  @@index([merchantId])
}

model PointsCalculation {
  id              String            @id @default(cuid())
  transactionId   String
  merchantId      String
  userId          String?
  points          Int?
  status          String
  error           String?
  metadata        Json?
  completedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  programMemberId String?
  merchant        Merchant          @relation(fields: [merchantId], references: [id])
  transaction     PointsTransaction @relation(fields: [transactionId], references: [id])
  user            User?             @relation(fields: [userId], references: [id])

  @@index([transactionId])
  @@index([merchantId])
  @@index([userId])
  @@index([status])
}

model ApiKey {
  id          String            @id @default(cuid())
  key         String            @unique
  name        String
  merchantId  String
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  environment String            @default("test")
  merchant    Merchant          @relation(fields: [merchantId], references: [id])
  rateLimits  ApiKeyRateLimit[]
  usageLogs   ApiKeyUsageLog[]

  @@index([merchantId])
  @@index([key])
  @@index([environment])
}

model ApiKeyUsageLog {
  id        String   @id @default(cuid())
  apiKeyId  String
  endpoint  String
  method    String
  status    Int
  duration  Int
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@index([apiKeyId])
  @@index([createdAt])
}

model ApiKeyRateLimit {
  id        String   @id @default(cuid())
  apiKeyId  String
  window    Int
  limit     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@unique([apiKeyId, window])
  @@index([apiKeyId])
}

model Webhook {
  id           String               @id @default(cuid())
  merchantId   String
  url          String
  events       WebhookEventType[]
  secret       String
  description  String?
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  merchant     Merchant             @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  deliveryLogs WebhookDeliveryLog[]

  @@index([merchantId])
}

model WebhookDeliveryLog {
  id         String           @id @default(cuid())
  webhookId  String
  eventType  WebhookEventType
  payload    Json
  statusCode Int?
  response   String?
  error      String?
  attempts   Int              @default(0)
  successful Boolean
  createdAt  DateTime         @default(now())
  webhook    Webhook          @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([eventType])
  @@index([successful])
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
  BLOCKED
}

enum DemoRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum WebhookEventType {
  transaction_created
  points_earned
  points_redeemed
  points_adjusted
  member_created
  member_updated
  member_deleted
  tier_changed
  reward_redeemed
  reward_created
  reward_updated
  reward_deleted
  campaign_started
  campaign_ended
  campaign_updated
}
